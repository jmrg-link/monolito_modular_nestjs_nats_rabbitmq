name: ddd-monolithic-nats
services:
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3000
      - NATS_URL=${NATS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      - nats
      - rabbitmq
      - monolith
    networks:
      - app-network
    command: ["node", "dist/apps/api-gateway/main.js"]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  monolith:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: monolith
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3001
      - NATS_URL=${NATS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DBNAME=${MONGODB_DBNAME}
    depends_on:
      - nats
      - rabbitmq
      - mongodb
    networks:
      - app-network
    command: ["node", "dist/apps/monolith/main.js"]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  rabbitmq:
    image: rabbitmq:4.0.9-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
    volumes:
      - rabbitmq_data_ddd:/var/lib/rabbitmq
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nats:
    image: nats:latest
    container_name: nats
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8222/varz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongodb_data_ddd_db:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq_data_ddd:
  mongodb_data_ddd_db:
